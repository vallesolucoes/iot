version: '3'

services:

  # Eclipse Mosquitto MQTT Broker
  mosquitto:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - MOSQUITTO_VERSION=${MOSQUITTO_VERSION:-latest}
    environment:
      - MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME}
      - MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}
    image: eclipse-mosquitto:${MOSQUITTO_VERSION:-latest}
    container_name: mosquitto
    restart: always
    ports:
      - 1883:1883
    volumes:
      - ./data:/mosquitto/data
      - ./log:/mosquitto/log
    networks:
      - edge
      
  nodered:
    build: 
      context: ./nodered
      dockerfile: Dockerfile
    #image: nodered/node-red
    container_name: nodered
    restart: unless-stopped
    environment:
      - TZ=America/Sao_Paulo
    ports: 
      - 1880:1880
    volumes:
      - node-red-data:/data
    networks:
      - edge

  # MySQL container
  mysql:
    # Use mysql:8.0.19 image
    image: mysql:8.0.19
    # Connect to "my-network" network, as defined below
    networks:
      - edge
    # Pass a list of environment variables to the container
    environment:
      MYSQL_ROOT_PASSWORD: secret

  # phpMyAdmin container
  phpmyadmin:
    # Use phpmyadmin/phpmyadmin:5.0.2 image
    image: phpmyadmin/phpmyadmin:5.0.2
    # Connect to "my-network" network, as defined below
    networks:
      - edge
    # Map port 8080 on the host to port 80 inside the container
    # Syntax is: "HOST_PORT:CONTAINER_PORT"
    ports:
      - "8080:80"
    # Pass a list of environment variables to the container
    environment:
      PMA_HOST: mysql
    # Wait for "mysql" container to start first
    depends_on:
      - mysql

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes: 
      - grafanaData:/var/lib/grafana
    networks:
      - edge      


# volumes 
volumes:
  node-red-data:
  influxData:
  grafanaData:
# Create internal link network for Containers
networks:
  edge:      

